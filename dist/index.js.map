{"mappings":";;;;;;;;;;;;;;;;;ACAA;AAwGA,MAAM,sCAA+B;IACjC,MAAM;IACN,UAAU;IACV,UAAU;IACV,YAAY;IACZ,cAAc;IACd,KAAK;IACL,OAAO;IACP,MAAM;IACN,MAAM;IACN,SAAS;IACT,SAAS;IACT,UAAU;IACV,UAAU;IACV,cAAc;IACd,cAAc;IACd,WAAW;IACX,oBAAoB;IACpB,SAAS;IACT,eAAe;QAAC;QAAI;KAAG;IACvB,UAAU,EAAE;AACf;AAED,MAAM,uCAAgD,CAAC,aACnD,UAAS,YACT,SAAQ,YACR,SAAQ,cACR,WAAU,WACV,QAAO,gBACP,aAAY,SACZ,MAAK,UACL,OAAM,gBACN,aAAY,EACf;IACG,MAAM,YAAY,CAAA,GAAA,mBAAA,EAA8B;IAEhD,CAAA,GAAA,sBAAA,EAAU;QACN,IAAI,SAAkC;QAEtC,kCAAkC;QAClC,IAAI,UAAU,SACV,SAAS,UAAU,OAAO,UAAU,SAAS;YACzC,MAAM;YACN,UAAU;YACV,UAAU,CAAC,CAAC;YACZ,YAAY,cAAc;YAC1B,cAAc,CAAC,CAAC;YAChB,SAAS,CAAC,CAAC;YACX,cAAc,CAAC,CAAC;YAChB,UAAU,YAAY,SAAS,IAAI,CAAA,UAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GAAM,UAAO;oBAAE,kBAAkB,QAAQ;gBAAO;QACjG;QAIL,2CAA2C;QAC3C,OAAO;YACH,IAAI,QACA,OAAO;QAEf;IACJ,GAAG;QAAC;QAAW;KAAS;IAExB,MAAM,WAAW;QACb,OAAO,SAAS;QAChB,QAAQ,UAAU;IACrB;IAED,qBAAO,CAAA,GAAA,sCAAA,EAAA,cAAA,OAAA;QAAK,KAAK;QAAW,OAAO;IAAQ;AAC/C;IAEA,2CAAe","sources":["src/index.ts","src/PanoramaViewer.tsx"],"sourcesContent":["import PanoramaViewer from './PanoramaViewer';\r\n\r\nexport {\r\n    PanoramaViewer\r\n};\r\n\r\n","'use client';\r\nimport 'pannellum';\r\nimport 'pannellum/build/pannellum.css';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport './styles.css';\r\n\r\ndeclare namespace pannellum {\r\n    interface viewerOptions extends Partial<ViewerOptions> {\r\n        type: string;\r\n        panorama: string;\r\n        // Add other options here\r\n    }\r\n\r\n    interface viewer {\r\n        destroy: () => void;\r\n        getContainer: () => HTMLElement;\r\n        loadScene: (sceneId: string | number, config: any, immediate?: boolean) => void;\r\n        getScene: () => any;\r\n        setScene: (sceneId: string | number, config: any, fadeDuration?: number) => void;\r\n        isLoaded: () => boolean;\r\n        toggleFullscreen: () => void;\r\n        getConfig: () => any;\r\n        getRenderer: () => any;\r\n        addHotSpot: (hotSpot: any) => void;\r\n        removeHotSpot: (hotSpot: any) => void;\r\n        getHotSpots: () => any[];\r\n        clearHotSpots: () => void;\r\n        resize: () => void;\r\n        onMouseDown: (event: MouseEvent) => void;\r\n        onMouseMove: (event: MouseEvent) => void;\r\n        onMouseUp: (event: MouseEvent) => void;\r\n        onTouchStart: (event: TouchEvent) => void;\r\n        onTouchMove: (event: TouchEvent) => void;\r\n        onTouchEnd: (event: TouchEvent) => void;\r\n        onOrientationChange: () => void;\r\n        onFullScreenChange: () => void;\r\n        onResize: () => void;\r\n    }\r\n\r\n    function viewer(container: HTMLElement, options: viewerOptions): viewer;\r\n}\r\n\r\nexport interface PanoramaViewerProps {\r\n    imagePath: string;\r\n    hotSpots?: HotspotProps[];\r\n    autoLoad?: boolean;\r\n    autoRotate?: number;\r\n    compass?: boolean;\r\n    showControls?: boolean;\r\n    width?: string;\r\n    height?: string;\r\n\r\n    haov?: number;\r\n    vaov?: number;\r\n\r\n    hotSpotDebug?: boolean;\r\n}\r\n\r\nexport interface HotspotProps {\r\n    pitch: number;\r\n    yaw: number;\r\n    type: string;\r\n    text?: string;\r\n    URL?: string;\r\n    cssClass?: string;\r\n    onClick?: Function;\r\n    createTooltipFunc?: Function;\r\n}\r\n\r\ninterface ViewerOptions {\r\n    type: string;\r\n    panorama: string;\r\n    autoLoad?: boolean;\r\n    autoRotate?: number;\r\n    hotSpotDebug?: boolean;\r\n    yaw?: number;\r\n    pitch?: number;\r\n    hfov?: number;\r\n    vaov?: number;\r\n    minHfov?: number;\r\n    maxHfov?: number;\r\n    minPitch?: number;\r\n    maxPitch?: number;\r\n    showControls?: boolean;\r\n    showZoomCtrl?: boolean;\r\n    keyboardZoom?: boolean;\r\n    mouseZoom?: boolean;\r\n    showFullscreenCtrl?: boolean;\r\n    compass?: boolean;\r\n    compassOffset?: [number, number];\r\n    hotSpots?: PanenellumHotSpot[];\r\n}\r\n\r\ninterface PanenellumHotSpot {\r\n    pitch: number;\r\n    yaw: number;\r\n    type: string;\r\n    text?: string;\r\n    URL?: string;\r\n    cssClass?: string;\r\n    createTooltipFunc?: Function;\r\n    clickHandlerFunc?: Function;\r\n}\r\n\r\nconst defaultConfig: ViewerOptions = {\r\n    type: 'equirectangular',\r\n    panorama: '',\r\n    autoLoad: true,\r\n    autoRotate: 0,\r\n    hotSpotDebug: false,\r\n    yaw: 0,\r\n    pitch: 0,\r\n    hfov: 100,\r\n    vaov: 75,\r\n    minHfov: 50,\r\n    maxHfov: 120,\r\n    minPitch: -90,\r\n    maxPitch: 90,\r\n    showZoomCtrl: true,\r\n    keyboardZoom: true,\r\n    mouseZoom: true,\r\n    showFullscreenCtrl: true,\r\n    compass: true,\r\n    compassOffset: [10, 10],\r\n    hotSpots: [],\r\n};\r\n\r\nconst PanoramaViewer: React.FC<PanoramaViewerProps> = ({\r\n    imagePath,\r\n    hotSpots,\r\n    autoLoad,\r\n    autoRotate,\r\n    compass,\r\n    showControls,\r\n    width,\r\n    height,\r\n    hotSpotDebug\r\n}) => {\r\n    const viewerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        let viewer: pannellum.viewer | null = null;\r\n\r\n        // Initialize the Pannellum viewer\r\n        if (viewerRef.current) {\r\n            viewer = pannellum.viewer(viewerRef.current, {\r\n                type: 'equirectangular',\r\n                panorama: imagePath,\r\n                autoLoad: !!autoLoad,\r\n                autoRotate: autoRotate || 0,\r\n                hotSpotDebug: !!hotSpotDebug,\r\n                compass: !!compass,\r\n                showControls: !!showControls,\r\n                hotSpots: hotSpots && hotSpots.map(hotSpot => ({ ...hotSpot, clickHandlerFunc: hotSpot.onClick })),\r\n            });\r\n\r\n        }\r\n\r\n        // Clean up the viewer on component unmount\r\n        return () => {\r\n            if (viewer) {\r\n                viewer.destroy();\r\n            }\r\n        };\r\n    }, [imagePath, hotSpots]);\r\n\r\n    const divStyle = {\r\n        width: width || \"100%\",\r\n        height: height || \"100%\",\r\n    };\r\n\r\n    return <div ref={viewerRef} style={divStyle} />;\r\n};\r\n\r\nexport default PanoramaViewer;\r\n"],"names":[],"version":3,"file":"index.js.map"}